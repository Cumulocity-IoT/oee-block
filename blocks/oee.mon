/* Copyright (c) 2018-2024 Cumulocity GmbH, DÃ¼sseldorf, Germany and/or its licensors
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at 
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
 * governing permissions and limitations under the License.
 */
package apamax.analyticsbuilder.oee;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.L10N;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.TimerParams;
using com.apama.json.JSONPlugin;
using com.apama.exceptions.Exception;
using com.apama.util.AnyExtractor;

event Oee_$Parameters {

    /**
     * Interval
     *
     * The interval for which the OEE should be calculated.
     **/
    float interval;
    constant float $DEFAULT_interval := 600.0;

    /**
     * Ideal Cycle Amount
     *
     * The theoretical maximum that can be produced in a single interval.
     **/
    float ica;

}

event Oee_$State {
    integer calculation_path;
    string output1;
    string output2;
    string output3;
    action<float, float, float, float> returns Value oee_calculation;
    TimeInStateExpressionParser machine_status;
    dictionary<string,StatefulExpressionParser> sep;
    optional<AmountByQualityState> amountByQuality;
    TimeInStateExpressionParser quality_status;
    dictionary<string,sequence<CalculationValue>> results;
}


/**
* OEE
*
* Calculates Overall Equipment Effectiveness (OEE) a measure for the effective usage of manufacturing equipment.
*
* OEE is calculated as the product of availability, performance, and quality. Equipment that is 100% available 
* running at 100% and producing only good parts results in an OEE of 100%.
*
* The block calculates OEE by processing inputs about equipment availability, number of pieces produced and the 
* quality of the produced pieces. For this a subset of the inputs of the block need to be connected:
*
* <ul>
* <li>Machine Status - availability indicator (true / false)</li>
* <li>Pieces - number of produced pieces</li>
* <li>Pcs Ok - number of produced pieces of good quality</li>
* <li>Pieces NOk - number produced pieces of bad quality</li>
* <li>Quality Ok - quality indicator (true/false)</li>
* </ul>
*
* Machine Status must always be provided, for the other three parameters the following combinations are allowed:
* <ul>
* <li>Pieces + Pcs Ok</li>
* <li>Pieces + Quality Ok</li>
* <li>Pcs Ok + Pcs NOk</li>
* <li>Pieces + Pcs Ok</li>
* </ul>
*
* Furthermore, OEE calculation is influenced by the parameters with which the block is configured. OEE is 
* calculated on a fixed interval and the interval defines this. Inputs during that interval are aggregated. 
* For example for the machine status, all times during which the input was true are added up to calculate 
* the availability. The piece counts (Pieces, Pieces Ok, Pieces NOk) are also aggregated. The first piece 
* count in an interval is split between the current and the previous interval proportionally to the time in 
* the interval it reflects. If the last piece count in the previous interval was at 300s of 600s interval 
* length and the first one in this interval happens after 150s, 66.6% of the pieces will be assigned to the
* previous interval and 33.3% to the current interval in which the piece count was reported.
* (More details: <a href="https://github.com/Cumulocity-IoT/oee-block/blob/main/docs/oee-theory/004splitting.md" target="_blank">Splitting</a>)
*  
* @$blockCategory Aggregates
*/
event Oee {

	BlockBase $base;
	Oee_$Parameters $parameters;

    action $validate() {
        if(path() = 0) {
            throw Exception("Unexpected combination of inputs", "IllegalArgumentException");
        }
    }

    action path() returns integer {
        boolean apa := $base.getInputCount("pieces") = 1;
        boolean aqa := $base.getInputCount("pieces_ok") = 1;
        boolean qla := $base.getInputCount("pieces_nok") = 1;
        boolean qok := $base.getInputCount("qok") = 1;
        boolean status := $base.getInputCount("status") = 1;
        if(status and apa and aqa and not qla and not qok) {
            return 1;
        }
        if(status and apa and qok and not qla and not aqa) {
            return 2;
        }
        if(status and aqa and qla and not apa and not qok) {
            return 3;
        }
        if(status and apa and qla and not aqa and not qok) {
            return 4;
        }
        return 0;
    }

	action setupCalculation(Activation $activation, Oee_$State $blockState) {
        $blockState.calculation_path := path();
        if($blockState.calculation_path=1 or $blockState.calculation_path=2) {
            $blockState.oee_calculation := performOEECalculation_APT_APA_AQA;
            $blockState.output1 := OEE.ACTUAL_PRODUCTION_TIME;
            $blockState.output2 := OEE.ACTUAL_PRODUCTION_AMOUNT;
            $blockState.output3 := OEE.ACTUAL_QUALITY_AMOUNT;
        } else if($blockState.calculation_path=3) {
            $blockState.oee_calculation := performOEECalculation_APT_AQA_QLA;
            $blockState.output1 := OEE.ACTUAL_PRODUCTION_TIME;
            $blockState.output2 := OEE.ACTUAL_QUALITY_AMOUNT;
            $blockState.output3 := OEE.QUALITY_LOSS_AMOUNT;
        } else if($blockState.calculation_path=4) {
            $blockState.output1 := OEE.ACTUAL_PRODUCTION_TIME;
            $blockState.output2 := OEE.ACTUAL_PRODUCTION_AMOUNT;
            $blockState.output3 := OEE.QUALITY_LOSS_AMOUNT;
            $blockState.oee_calculation := performOEECalculation_APT_APA_QLA;
        }
            $blockState.results[$blockState.output1] := new sequence<CalculationValue>;
            $blockState.results[$blockState.output2] := new sequence<CalculationValue>;
            $blockState.results[$blockState.output3] := new sequence<CalculationValue>;

        if($blockState.calculation_path=1) {
            $blockState.machine_status := TimeInStateExpressionParser.parseText("value", $activation.timestamp, $parameters.interval);
            $blockState.sep.add(OEE.ACTUAL_PRODUCTION_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval));
            $blockState.sep.add(OEE.ACTUAL_QUALITY_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval));
        } else if($blockState.calculation_path=2) {
            $blockState.machine_status := TimeInStateExpressionParser.parseText("value", $activation.timestamp, $parameters.interval);
            $blockState.sep.add(OEE.ACTUAL_PRODUCTION_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval)); 
            $blockState.amountByQuality := AmountByQualityState.build(OEE.QUALITY_OK,OEE.QUALITY_OK);
            $blockState.quality_status := TimeInStateExpressionParser.parseText("value", $activation.timestamp, $parameters.interval);
        } else if($blockState.calculation_path=3) {
            $blockState.machine_status := TimeInStateExpressionParser.parseText("value", $activation.timestamp, $parameters.interval);
            $blockState.sep.add(OEE.ACTUAL_QUALITY_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval));
            $blockState.sep.add(OEE.QUALITY_LOSS_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval));
        } else if($blockState.calculation_path=4) {
            $blockState.machine_status := TimeInStateExpressionParser.parseText("value", $activation.timestamp, $parameters.interval);
            $blockState.sep.add(OEE.ACTUAL_PRODUCTION_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval));
            $blockState.sep.add(OEE.QUALITY_LOSS_AMOUNT, 
                                StatefulExpressionParser.parseText("value", Util.sum, Util.diff, 0.0, $activation.timestamp, $parameters.interval));            
        }
	}

	action applyToMachineStatus(TimeInStateExpressionParser tisep, CalculationValue iv) returns sequence<CalculationValue> {
        sequence<CalculationValue> result := new sequence<CalculationValue>;
        boolean stateChanged := tisep.evaluateWith(iv);
        if(tisep.currentInterval.isAfter(iv.time)) {	
            sequence<Interval> intervals := tisep.currentInterval.intervalsTo(iv.time);
            Interval timespan;
            for timespan in intervals {
                if (timespan.end <= iv.time) {
                    float value := float.parse((tisep.timeInStateForInterval(true, timespan)).formatFixed(OEE.DECIMAL_PRECISION));
                    result.append(CalculationValue(timespan.end, value));
                }
            }
            tisep.currentInterval.adjustTo(iv.time);
            tisep.cleanup(tisep.currentInterval.start);
        }
        if (stateChanged) {
            // TODO needed?
            route MachineStatus.build(OEE.machineStatus(tisep.state)).forTime(iv.time);
        }
        return result;
	}

	action applyToQualityStatus(TimeInStateExpressionParser tisep, AmountByQualityState amountByQuality, CalculationValue iv) {
        boolean statusChanged := tisep.evaluateWith(iv);
        QualityStatus qe := QualityStatus.build(OEE.qualityStatus(tisep.state)).forTime(iv.time);
        amountByQuality.recordStatus(qe);
 	}

	action retrieveQualityStatus(TimeInStateExpressionParser tisep, AmountByQualityState amountByQuality, float time) returns sequence<CalculationValue> {
        sequence<CalculationValue> result := new sequence<CalculationValue>;
        if(tisep.currentInterval.isAfter(time) and amountByQuality.amountReceivedAfter(tisep.currentInterval.end)) {
            sequence<Interval> intervals := tisep.currentInterval.intervalsTo(time);
            Interval first := intervals[0];
            Interval last := intervals[intervals.size()-1];
            Interval int;
            for int in intervals {
                if((int=first or int!=last) and amountByQuality.amountReceivedAfter(int.end)) {
                    float value := float.parse((amountByQuality.retrieveBy(int)).formatFixed(OEE.DECIMAL_PRECISION));
                    result.append(CalculationValue(int.end, value));
                    tisep.currentInterval.adjustTo(int.end);
                }
            }
        }											
        return result;
    }


	action applyToTransformationRule(string inputName, StatefulExpressionParser sep, optional<AmountByQualityState> amountByQuality, CalculationValue iv) returns sequence<CalculationValue> {
        sequence<CalculationValue> result := new sequence<CalculationValue>;

        if(sep.currentInterval.isIn(iv.time)) {
            any intermediate := sep.evaluateWith(iv);
            if(not intermediate.empty()) {
                ifpresent amountByQuality as amountByQuality {
                    amountByQuality.add(CalculationValue(iv.time, <float>intermediate));
                }
            } 
        } else if(sep.currentInterval.isAfter(iv.time)) {
            float previous := Util.anyToFloat(sep.value);
            sequence<CalculationValue> splitSequence := sep.ep.split(iv, sep.currentInterval);
            if(splitSequence.size()=0) {	
                float val := float.parse((<float>sep.retrieveAndReset()).formatFixed(OEE.DECIMAL_PRECISION));
                sequence<Interval> intervals := sep.currentInterval.intervalsTo(iv.time);
                Interval first := intervals[0];
                Interval last := intervals[intervals.size()-1];
                Interval int;
                for int in intervals {
                    if(int=first) {
                        ifpresent amountByQuality as amountByQuality {
                            amountByQuality.add(CalculationValue(int.end, val-previous));
                        }
                    }
                    if(int!=last) {
                        result.append(CalculationValue(int.end, val));
                        val := (<float>sep.startValue);
                    }
                }
                sep.currentInterval.adjustTo(iv.time);
            } else {
                CalculationValue first := splitSequence[0];
                CalculationValue last := splitSequence[splitSequence.size()-1];
                CalculationValue sa;
                for sa in splitSequence {
                    float ia := Util.anyToFloat(sep.evaluateWith(sa));
                    if(sa=first) {
                        float val := float.parse((<float>sep.retrieveAndReset()).formatFixed(OEE.DECIMAL_PRECISION));
                        result.append(CalculationValue(sa.time, val));
                        ifpresent amountByQuality as amountByQuality {
                            amountByQuality.add(CalculationValue(sa.time, ia));
                        }
                    }
                    if(sa!=last and sa !=first) {
                        float val := float.parse((<float>sep.retrieveAndReset()).formatFixed(OEE.DECIMAL_PRECISION));
                        result.append(CalculationValue(sa.time, val));
                        ifpresent amountByQuality as amountByQuality {
                            amountByQuality.add(CalculationValue(sa.time, ia));
                        }
                    } 
                    if(sa=last and sa !=first) {
                        float val := float.parse((<float>sep.value).formatFixed(OEE.DECIMAL_PRECISION));
                        ifpresent amountByQuality as amountByQuality {
                            amountByQuality.add(CalculationValue(sa.time, ia));
                        }
                    }
                    sep.currentInterval.adjustTo(sa.time);					
                }
            }
        }
        return result;	
	}

	action performOEECalculation_APT_APA_AQA(float interval, float actualProductionTime, float actualProductionAmount, float actualQualityAmount) returns Value {
		float idealCycleAmount := $parameters.ica;
		float cycleLength := interval;
		float idealCycleTime := cycleLength / idealCycleAmount; 
		float potentialProductionTime := interval;
		// Level 2
		float idealAmount := (potentialProductionTime / cycleLength) * idealCycleAmount;
		float idealProductionAmount := (actualProductionTime / cycleLength) * idealCycleAmount;
		float idealQualityTime := (actualQualityAmount / idealCycleAmount) * cycleLength;
		float idealMachineRuntime := (actualProductionAmount / idealCycleAmount) * cycleLength;
		float qualityLossAmount := actualProductionAmount - actualQualityAmount;
		// Level 3
		float availabilityLossAmount := idealAmount - idealProductionAmount;
		float performanceLossAmount := idealProductionAmount - actualProductionAmount;
		float performanceLossTime := actualProductionTime - idealMachineRuntime;
		float qualityLossTime := (qualityLossAmount / idealCycleAmount) * cycleLength;	
		// Level 4
		float availabilityLossTime := (availabilityLossAmount / idealCycleAmount) * cycleLength;
		float availability := 0.0;
		if(potentialProductionTime > 0.0) {
			availability := actualProductionTime / potentialProductionTime;
		}
		float performance := 0.0;
		if(actualProductionTime > 0.0) {
			performance := idealMachineRuntime / actualProductionTime;
		}
		float quality := 0.0;
		if(actualProductionAmount > 0.0) {
			quality := actualQualityAmount / actualProductionAmount;
		}
		// Level 5
		float oee := availability * performance * quality;

        Value details := new Value;
        details.properties := {OEE.OEE: oee, OEE.PERFORMANCE: performance, OEE.AVAILABILTY: availability, OEE.QUALITY: quality,
            OEE.ACTUAL_PRODUCTION_AMOUNT: actualProductionAmount, OEE.ACTUAL_PRODUCTION_TIME: actualProductionTime,
            OEE.ACTUAL_QUALITY_AMOUNT: actualQualityAmount, OEE.IDEAL_AMOUNT: idealAmount, OEE.IDEAL_CYCLE_TIME: idealCycleTime,
            OEE.IDEAL_QUALITY_TIME: idealQualityTime, OEE.IDEAL_MACHINE_RUNTIME: idealMachineRuntime, OEE.QUALITY_LOSS_AMOUNT: qualityLossAmount,
            OEE.AVAILABILITY_LOSS_AMOUNT: availabilityLossAmount, OEE.PERFORMANCE_LOSS_AMOUNT: performanceLossAmount, 
            OEE.PERFORMANCE_LOSS_TIME: performanceLossTime, OEE.QUALITY_LOSS_TIME: qualityLossTime, OEE.AVAILABILITY_LOSS_TIME: availabilityLossTime
        };
        return details;
	}

	action performOEECalculation_APT_AQA_QLA(float interval, float actualProductionTime, float actualQualityAmount, float qualityLossAmount) returns Value {
		float idealCycleAmount := $parameters.ica;
		float cycleLength := interval;
		float idealCycleTime := cycleLength / idealCycleAmount; 
		float potentialProductionTime := interval;  
		// Level 2
		float availabilityLossTime := potentialProductionTime - actualProductionTime; 
		float idealAmount := (potentialProductionTime / cycleLength) * idealCycleAmount;
		float idealProductionAmount := (actualProductionTime / cycleLength) * idealCycleAmount;
		float idealQualityTime := (actualQualityAmount / idealCycleAmount) * cycleLength;
		float qualityLossTime := (qualityLossAmount / idealCycleAmount) * cycleLength;
		float actualProductionAmount := actualQualityAmount + qualityLossAmount;
		// Level 3
		float availabilityLossAmount := (availabilityLossTime * idealCycleAmount) / cycleLength; 
		float idealMachineRuntime := (actualProductionAmount / idealCycleAmount) * cycleLength;
		float performanceLossAmount := idealProductionAmount - actualProductionAmount;
		// Level 4
		float performanceLossTime := ((performanceLossAmount / idealCycleAmount) * cycleLength);
		float availability := 0.0;
		if(potentialProductionTime > 0.0) {
			availability := actualProductionTime / potentialProductionTime;
		}
		float performance := 0.0;
		if(actualProductionTime > 0.0) {
			performance := idealMachineRuntime / actualProductionTime;
		}
		float quality := 0.0;
		if(actualProductionAmount > 0.0) {
			quality := actualQualityAmount / actualProductionAmount;
		}
		// Level 5
		float oee := availability * performance * quality;
		
        Value details := new Value;
        details.properties := {OEE.OEE: oee, OEE.PERFORMANCE: performance, OEE.AVAILABILTY: availability, OEE.QUALITY: quality,
            OEE.ACTUAL_PRODUCTION_AMOUNT: actualProductionAmount, OEE.ACTUAL_PRODUCTION_TIME: actualProductionTime,
            OEE.ACTUAL_QUALITY_AMOUNT: actualQualityAmount, OEE.IDEAL_AMOUNT: idealAmount, OEE.IDEAL_CYCLE_TIME: idealCycleTime,
            OEE.IDEAL_QUALITY_TIME: idealQualityTime, OEE.IDEAL_MACHINE_RUNTIME: idealMachineRuntime, OEE.QUALITY_LOSS_AMOUNT: qualityLossAmount,
            OEE.AVAILABILITY_LOSS_AMOUNT: availabilityLossAmount, OEE.PERFORMANCE_LOSS_AMOUNT: performanceLossAmount, 
            OEE.PERFORMANCE_LOSS_TIME: performanceLossTime, OEE.QUALITY_LOSS_TIME: qualityLossTime, OEE.AVAILABILITY_LOSS_TIME: availabilityLossTime
        };
        return details;
    }

	action performOEECalculation_APT_APA_QLA(float interval, float actualProductionTime, float actualProductionAmount, float qualityLossAmount) returns Value {
		float idealCycleAmount := $parameters.ica;
		float cycleLength := interval;
		float idealCycleTime := cycleLength / idealCycleAmount; 
		float potentialProductionTime := interval;
        // Level 2
		float idealAmount := (potentialProductionTime / cycleLength) * idealCycleAmount;
		float idealProductionAmount := (actualProductionTime / cycleLength) * idealCycleAmount;
		float idealMachineRuntime := (actualProductionAmount / idealCycleAmount) * cycleLength;
		float actualQualityAmount := actualProductionAmount - qualityLossAmount;
		float qualityLossTime := (qualityLossAmount / idealCycleAmount) * cycleLength;
		// Level 3
		float availabilityLossAmount := idealAmount - idealProductionAmount;
		float performanceLossAmount := idealProductionAmount - actualProductionAmount;
		float idealQualityTime := (actualQualityAmount / idealCycleAmount) * cycleLength;
		// Level 4
		float availabilityLossTime := (availabilityLossAmount / idealCycleAmount) * cycleLength;
		float performanceLossTime := ((performanceLossAmount / idealCycleAmount) * cycleLength);
		float availability := 0.0;
		if(potentialProductionTime > 0.0) {
			availability := actualProductionTime / potentialProductionTime;
		}
		float performance := 0.0;
		if(actualProductionTime > 0.0) {
			performance := idealMachineRuntime / actualProductionTime;
		}
		float quality := 0.0;
		if(actualProductionAmount > 0.0) {
			quality := actualQualityAmount / actualProductionAmount;
		}	
		// Level 5
		float oee := availability * performance * quality;

        Value details := new Value;
        details.properties := {OEE.OEE: oee, OEE.PERFORMANCE: performance, OEE.AVAILABILTY: availability, OEE.QUALITY: quality,
            OEE.ACTUAL_PRODUCTION_AMOUNT: actualProductionAmount, OEE.ACTUAL_PRODUCTION_TIME: actualProductionTime,
            OEE.ACTUAL_QUALITY_AMOUNT: actualQualityAmount, OEE.IDEAL_AMOUNT: idealAmount, OEE.IDEAL_CYCLE_TIME: idealCycleTime,
            OEE.IDEAL_QUALITY_TIME: idealQualityTime, OEE.IDEAL_MACHINE_RUNTIME: idealMachineRuntime, OEE.QUALITY_LOSS_AMOUNT: qualityLossAmount,
            OEE.AVAILABILITY_LOSS_AMOUNT: availabilityLossAmount, OEE.PERFORMANCE_LOSS_AMOUNT: performanceLossAmount, 
            OEE.PERFORMANCE_LOSS_TIME: performanceLossTime, OEE.QUALITY_LOSS_TIME: qualityLossTime, OEE.AVAILABILITY_LOSS_TIME: availabilityLossTime
        };
        return details;
    }

    constant string $INPUT_TYPE_status := "boolean";
    constant string $INPUT_TYPE_pieces := "float";
    constant string $INPUT_TYPE_pieces_ok := "float";
    constant string $INPUT_TYPE_pieces_nok := "float";
    constant string $INPUT_TYPE_qok := "boolean";

    /**
     *
	 * @param $input_status Machine availability status indicator.
     * @$inputName status Machine Status
     * @param $activation The current activation.
	 * @param $input_pieces The produced piece count.
     * @$inputName pieces Pieces
	 * @param $input_pieces_ok The ok piece count.
     * @$inputName pieces_ok Pcs Ok
	 * @param $input_pieces_nok The not ok piece count.
     * @$inputName pieces_nok Pcs NOk
	 * @param $input_qok Quality indicator.
     * @$inputName qok Quality Ok
	 */
    action $process(Activation $activation, Value $input_status, Value $input_pieces, 
                    Value $input_pieces_ok, Value $input_pieces_nok, Value $input_qok,
                    Oee_$State $blockState) {
        
        if($blockState.calculation_path=0) {
            setupCalculation($activation, $blockState);
        }
        CalculationValue iv := CalculationValue($activation.timestamp, $input_status.value);
        sequence<CalculationValue> result := applyToMachineStatus($blockState.machine_status, iv);
        $blockState.results[OEE.ACTUAL_PRODUCTION_TIME].appendSequence(result);

        ifpresent $blockState.amountByQuality as amountByQuality {  
            CalculationValue iv := CalculationValue($activation.timestamp, $input_qok.value);
            applyToQualityStatus($blockState.quality_status, amountByQuality, iv);
            sequence<CalculationValue> result := retrieveQualityStatus($blockState.quality_status, amountByQuality, iv.time);
            $blockState.results[OEE.ACTUAL_QUALITY_AMOUNT].appendSequence(result);
        }

        if(now($activation,$input_pieces)) {
            CalculationValue iv := CalculationValue($input_pieces.timestamp, $input_pieces.value);
            sequence<CalculationValue> result := applyToTransformationRule(OEE.ACTUAL_PRODUCTION_AMOUNT, $blockState.sep[OEE.ACTUAL_PRODUCTION_AMOUNT], $blockState.amountByQuality, iv);
            $blockState.results[OEE.ACTUAL_PRODUCTION_AMOUNT].appendSequence(result);
            ifpresent $blockState.amountByQuality as amountByQuality {   
                CalculationValue ia;
                for ia in result {
                    if((amountByQuality.time>=$blockState.quality_status.currentInterval.end) and $blockState.quality_status.currentInterval.isAfter(ia.time)) {
                        sequence<CalculationValue> result := retrieveQualityStatus($blockState.quality_status, amountByQuality, iv.time);
                        $blockState.results[OEE.ACTUAL_QUALITY_AMOUNT].appendSequence(result);
                    }
                }
            } 						
        }

        if(now($activation,$input_pieces_ok)) {
            CalculationValue iv := CalculationValue($input_pieces_ok.timestamp, $input_pieces_ok.value);
            sequence<CalculationValue> result := applyToTransformationRule(OEE.ACTUAL_QUALITY_AMOUNT, $blockState.sep[OEE.ACTUAL_QUALITY_AMOUNT], new optional<AmountByQualityState>, iv);
            $blockState.results[OEE.ACTUAL_QUALITY_AMOUNT].appendSequence(result);
        }

        if(now($activation,$input_pieces_nok)) {
            CalculationValue iv := CalculationValue($input_pieces_nok.timestamp, $input_pieces_nok.value);
            sequence<CalculationValue> result := applyToTransformationRule(OEE.QUALITY_LOSS_AMOUNT, $blockState.sep[OEE.QUALITY_LOSS_AMOUNT], new optional<AmountByQualityState>, iv);
            $blockState.results[OEE.QUALITY_LOSS_AMOUNT].appendSequence(result);
        }

        sequence<float> toClear := new sequence<float>; 
        CalculationValue output1;
        for output1 in $blockState.results[$blockState.output1] {
            optional<CalculationValue> output2 := findin($blockState.results[$blockState.output2],output1.time);
            optional<CalculationValue> output3 := findin($blockState.results[$blockState.output3],output1.time);
            ifpresent output2,output3 {
                Value details := roundResults($blockState.oee_calculation($parameters.interval, <float>output1.value, <float>output2.value, <float>output3.value));
                details.value := true;
                details.timestamp := output1.time;
                $setOutput_oee($activation, <float>details.properties[OEE.OEE]);
                $setOutput_availability($activation, <float>details.properties[OEE.AVAILABILTY]);
                $setOutput_performance($activation, <float>details.properties[OEE.PERFORMANCE]);
                $setOutput_quality($activation, <float>details.properties[OEE.QUALITY]);
                $setOutput_timestamp($activation, output1.time);
                $setOutput_details($activation, details);
                toClear.append(output1.time);
            }
        }
        $blockState.results[$blockState.output1] := clear($blockState.results[$blockState.output1], toClear);
        $blockState.results[$blockState.output2] := clear($blockState.results[$blockState.output2], toClear);
        $blockState.results[$blockState.output3] := clear($blockState.results[$blockState.output3], toClear);
        // TODO take into account machine status for other inputs
    }

    action roundResults(Value result) returns Value {
        string key;
        for key in result.properties.keys() {
            float value := <float>result.properties[key];
            result.properties[key] := float.parse(value.formatFixed(OEE.DECIMAL_PRECISION));
        }
        return result;
    }

    action clear(sequence<CalculationValue> s, sequence<float> toClear) returns sequence<CalculationValue> {
        sequence<CalculationValue> s_new := new sequence<CalculationValue>;
        CalculationValue v;
        for v in s {
            if(toClear.indexOf(v.time)=-1) {
                s_new.append(v);
            }
        }
        return s_new;
    }

    action findin(sequence<CalculationValue> s, float time) returns optional<CalculationValue> {
        CalculationValue v;
        for v in s {
            if(v.time=time) {
                return optional<CalculationValue>(v);
            }
        }
        return new optional<CalculationValue>;
    }

    action now(Activation $activation, Value v) returns boolean {
        return $activation.timestamp=v.timestamp; 
    }

    /**
     * OEE
     *
     * The calculated OEE for the interval.
     **/
    action<Activation,float> $setOutput_oee;
    /**
     * Availability
     *
     * The calculated availability for the interval.
     **/
    action<Activation,float> $setOutput_availability;
    /**
     * Performance
     *
     * The calculated performance for the interval.
     **/
    action<Activation,float> $setOutput_performance;
    /**
     * Quality
     *
     * The calculated quality for the interval.
     **/
    action<Activation,float> $setOutput_quality;
    /**
     * Timestamp
     *
     * The timestamp marking the end of the calculated interval.
     **/
    action<Activation,float> $setOutput_timestamp;
    /**
     * Details
     *
     * Details of the calculation including all components of the 
     * OEE calculation:
	 * <ul>
     * <li>OEE</li>
     * <li>Availability</li>
     * <li>Performance</li>
     * <li>Quality</li>
     * <li>Actual Production Amount</li>
     * <li>Actual Production Time</li>
     * <li>Actual Quality Amount</li>
     * <li>Ideal Amount</li>
     * <li>Ideal Cycle Time</li>
     * <li>Ideal Qualiy Time</li>
     * <li>Ideal Machine Runtime</li>
     * <li>Quality Loss Amount</li>
     * <li>Availability Loss Amount</li>
     * <li>Performance Loss Amount</li>
     * <li>Performance Loss Time</li>
     * <li>Quality Loss Time</li>
     * <li>Availability Loss Time</li>
	 * </ul>     
     **/
    action<Activation,Value> $setOutput_details;
    constant string $OUTPUT_TYPE_details := "pulse";
}
