__pysys_title__   = r""" Category Amount - Tests focused on actual production amount """ 
#                        ================================================================================
__pysys_purpose__ = r""" """ 
	
__pysys_created__ = "2024-11-13"

from basetest.OeeBaseTest import OeeBaseTest
from pysys.constants import *
import basetest.OeeBaseTest

class PySysTest(OeeBaseTest):
    
	def execute(self):
		correlator = self.startAnalyticsBuilderCorrelator(blockSourceDir=f'{self.project.SOURCE}/src/blocks/oee')
		modelId = self.createTestModel('apamax.analyticsbuilder.oee.Oee', 
								 inputs={'status':'boolean', 'amount':'float', 'amount_ok':'float' ,'amount_nok':None,'qok':None},
								 parameters={'0:interval':60.0,'0:ica':10.0})	
		self.sendEventStrings(correlator,
                              self.timestamp(30),
							  # Splitting across multiple intervals
							  self.inputEvent('status', True, id=modelId),
  							  self.inputEvent('amount', 0, id=modelId),
							  self.inputEvent('amount_ok', 0, id=modelId),
							  self.timestamp(90),
							  self.inputEvent('status', True, id=modelId),
  							  self.inputEvent('amount', 0, id=modelId),
							  self.inputEvent('amount_ok', 0, id=modelId),

                              self.timestamp(750),
							  self.inputEvent('status', True, id=modelId),
  							  self.inputEvent('amount', 10, id=modelId),
							  self.inputEvent('amount_ok', 10, id=modelId),
                              self.timestamp(810),
							  # Splitting with < 100 availability
							  self.inputEvent('status', True, id=modelId),
  							  self.inputEvent('amount', 0, id=modelId),
							  self.inputEvent('amount_ok', 0, id=modelId),
							  self.timestamp(870),
							  self.inputEvent('status', True, id=modelId),
  							  self.inputEvent('amount', 0, id=modelId),
							  self.inputEvent('amount_ok', 0, id=modelId),
							  self.timestamp(1080),
							  self.inputEvent('status', False, id=modelId),
							  self.timestamp(1320),
							  self.inputEvent('status', True, id=modelId),
                              self.timestamp(1530),
							  self.inputEvent('status', True, id=modelId),
  							  self.inputEvent('amount', 10, id=modelId),
							  self.inputEvent('amount_ok', 10, id=modelId),
                              self.timestamp(1590),
							  # testCOE671
							  self.timestamp(1591),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1592),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1593),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1594),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1595),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1596),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1597),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1598),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1599),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1600),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1601),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1602),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1603),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1604),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1605),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1606),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1607),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1608),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1609),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1610),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1611),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1612),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1613),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1614),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1615),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1616),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1617),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1618),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1619),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1620),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1621),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1622),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1623),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1624),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1625),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1626),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1627),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1628),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1629),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1630),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1631),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1632),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1633),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1634),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1635),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1636),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1637),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1638),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1639),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1640),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1641),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1642),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1643),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1644),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1645),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1646),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1647),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1648),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1649),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1650),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1651),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1652),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1653),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1654),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1655),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1656),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1657),
  							  self.inputEvent('amount', 8, id=modelId),
							  self.timestamp(1658),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1659),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.timestamp(1660),
  							  self.inputEvent('amount', 9, id=modelId),
							  self.inputEvent('amount_ok', 0, id=modelId),
							  self.timestamp(1800),
  							  self.inputEvent('amount', 0, id=modelId),
							  self.inputEvent('amount_ok', 0, id=modelId),
                              )
		correlator.flush()

	def validate(self):
		self.assertBlockOutput('timestamp', 	[
							90.0,	150.0,	210.0,	270.0,	330.0,	390.0,	450.0,	510.0,	570.0,	630.0,	690.0,	750.0,
							810.0, 	870.0, 	930.0, 	990.0, 	1050.0, 1110.0, 1170.0, 1230.0, 1290.0, 1350.0, 1410.0, 1470.0, 1530.0,
							1590.0,	1650.0])
		self.assertThat('output == expected', 
						output=self.details('ActualProductionAmount'), 
						expected=				[
							0.0,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,	0.9091,
							0.0, 	0.0, 	1.4286, 1.4286, 1.4286, 0.7143, 0.0, 	0.0, 	0.0, 	0.7143, 1.4286, 1.4286, 1.4286,
							8.8525,	511.1475])
