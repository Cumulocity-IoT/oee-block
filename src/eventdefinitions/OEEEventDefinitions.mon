/* Copyright (c) 2018-2024 Cumulocity GmbH, DÃ¼sseldorf, Germany and/or its licensors
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except 
 * in compliance with the License. You may obtain a copy of the License at 
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
 * OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
 * governing permissions and limitations under the License.
 */
package apamax.analyticsbuilder.oee;

using com.apama.correlator.timeformat.TimeFormat;

event OEE {
	constant string AVAILABILTY := "Availability";
	constant string PERFORMANCE := "Performance";
	constant string QUALITY := "Quality";
	constant string OEE := "OEE";
	constant string POTENTIAL_PRODUCTION_TIME := "PotentialProductionTime";
	constant string IDEAL_AMOUNT := "IdealAmount";
	constant string ACTUAL_PRODUCTION_TIME := "ActualProductionTime";
	constant string AVAILABILITY_LOSS_TIME := "AvailabilityLossTime";
	constant string AVAILABILITY_LOSS_AMOUNT := "AvailabilityLossAmount"; 
	constant string IDEAL_PRODUCTION_AMOUNT := "IdealProductionAmount";
	constant string IDEAL_MACHINE_RUNTIME := "IdealMachineRuntime";
	constant string ACTUAL_PRODUCTION_AMOUNT := "ActualProductionAmount";
	constant string PERFORMANCE_LOSS_TIME := "PerformanceLossTime";
	constant string PERFORMANCE_LOSS_AMOUNT := "PerformanceLossAmount";
	constant string IDEAL_QUALITY_TIME := "IdealQualityTime";
	constant string ACTUAL_QUALITY_AMOUNT := "ActualQualityAmount";
	constant string QUALITY_LOSS_AMOUNT := "QualityLossAmount";
	constant string QUALITY_LOSS_TIME := "QualityLossTime";
	constant string IDEAL_CYCLE_TIME := "IdealCycleTime";
	constant string IDEAL_CYCLE_AMOUNT := "IdealCycleAmount";
	constant string QUALITY_OK := "QualityOk";
	constant string QUALITY_BAD := "QualityBad";
	constant string MACHINE_UP := "MachineUp";
	constant string MACHINE_DOWN := "MachineDown";
	
	constant integer DECIMAL_PRECISION := 4;

	static action machineStatus(boolean newState) returns string {
		if(newState = true) {
			return MACHINE_UP;
		} else {
			return MACHINE_DOWN;
		}		
	}
	
	static action qualityStatus(boolean newState) returns string {
		if(newState = true) {
			return QUALITY_OK;
		} else {
			return QUALITY_BAD;
		}
	}
}

event DateTimeConstants {
	constant string DATE_PATTERN := "yyyy-MM-dd'T'HH:mm:ss'Z'";
}

event MachineEvent {
	wildcard string value;
	wildcard string category;	
	constant string NONE := "";
}

event CalculationValue {
	float time;
	any value;
}

event MachineStatus {
	constant string NAME := "MACHINE_STATUS";
	wildcard string type;
	wildcard float time;

	static action build(string type) returns MachineStatus {
		MachineStatus e := new MachineStatus;
		e.type := type;
		e.time := TimeFormat.getSystemTime();
		return e;
	}
	
	action forTime(float ts) returns MachineStatus {
		time := ts;
		return self;
	}
}

event QualityStatus {
	constant string NAME := "QUALITY_STATUS";
	wildcard string type;
	wildcard float time;

	static action build(string type) returns QualityStatus {
		QualityStatus e := new QualityStatus;
		e.type := type;
		e.time := TimeFormat.getSystemTime();
		return e;
	}
	
	action forTime(float ts) returns QualityStatus {
		time := ts;
		return self;
	}	
}